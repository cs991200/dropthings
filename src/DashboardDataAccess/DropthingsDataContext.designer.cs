#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dropthings.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="dropthings")]
	public partial class DropthingsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWidgetZone(WidgetZone instance);
    partial void UpdateWidgetZone(WidgetZone instance);
    partial void DeleteWidgetZone(WidgetZone instance);
    partial void InsertUserSetting(UserSetting instance);
    partial void UpdateUserSetting(UserSetting instance);
    partial void DeleteUserSetting(UserSetting instance);
    partial void InsertToken(Token instance);
    partial void UpdateToken(Token instance);
    partial void DeleteToken(Token instance);
    partial void InsertWidgetInstance(WidgetInstance instance);
    partial void UpdateWidgetInstance(WidgetInstance instance);
    partial void DeleteWidgetInstance(WidgetInstance instance);
    partial void InsertWidget(Widget instance);
    partial void UpdateWidget(Widget instance);
    partial void DeleteWidget(Widget instance);
    partial void Insertaspnet_Role(aspnet_Role instance);
    partial void Updateaspnet_Role(aspnet_Role instance);
    partial void Deleteaspnet_Role(aspnet_Role instance);
    partial void Insertaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Updateaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Deleteaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void InsertRoleTemplate(RoleTemplate instance);
    partial void UpdateRoleTemplate(RoleTemplate instance);
    partial void DeleteRoleTemplate(RoleTemplate instance);
    partial void InsertColumn(Column instance);
    partial void UpdateColumn(Column instance);
    partial void DeleteColumn(Column instance);
    partial void InsertWidgetsInRole(WidgetsInRole instance);
    partial void UpdateWidgetsInRole(WidgetsInRole instance);
    partial void DeleteWidgetsInRole(WidgetsInRole instance);
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void InsertPage(Page instance);
    partial void UpdatePage(Page instance);
    partial void DeletePage(Page instance);
    #endregion
		
		public DropthingsDataContext() : 
				base(global::Dropthings.DataAccess.Properties.Settings.Default.dropthingsConnectionString6, mappingSource)
		{
			OnCreated();
		}
		
		public DropthingsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DropthingsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DropthingsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DropthingsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<WidgetZone> WidgetZones
		{
			get
			{
				return this.GetTable<WidgetZone>();
			}
		}
		
		public System.Data.Linq.Table<UserSetting> UserSettings
		{
			get
			{
				return this.GetTable<UserSetting>();
			}
		}
		
		public System.Data.Linq.Table<Token> Tokens
		{
			get
			{
				return this.GetTable<Token>();
			}
		}
		
		public System.Data.Linq.Table<WidgetInstance> WidgetInstances
		{
			get
			{
				return this.GetTable<WidgetInstance>();
			}
		}
		
		public System.Data.Linq.Table<Widget> Widgets
		{
			get
			{
				return this.GetTable<Widget>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Role> aspnet_Roles
		{
			get
			{
				return this.GetTable<aspnet_Role>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this.GetTable<aspnet_UsersInRole>();
			}
		}
		
		public System.Data.Linq.Table<RoleTemplate> RoleTemplates
		{
			get
			{
				return this.GetTable<RoleTemplate>();
			}
		}
		
		public System.Data.Linq.Table<Column> Columns
		{
			get
			{
				return this.GetTable<Column>();
			}
		}
		
		public System.Data.Linq.Table<WidgetsInRole> WidgetsInRoles
		{
			get
			{
				return this.GetTable<WidgetsInRole>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<Page> Pages
		{
			get
			{
				return this.GetTable<Page>();
			}
		}
	}
	
	[Table(Name="dbo.WidgetZone")]
	public partial class WidgetZone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private string _UniqueID;
		
		private int _OrderNo;
		
		private EntitySet<WidgetInstance> _WidgetInstances;
		
		private EntitySet<Column> _Columns;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnUniqueIDChanging(string value);
    partial void OnUniqueIDChanged();
    partial void OnOrderNoChanging(int value);
    partial void OnOrderNoChanged();
    #endregion
		
		public WidgetZone()
		{
			this._WidgetInstances = new EntitySet<WidgetInstance>(new Action<WidgetInstance>(this.attach_WidgetInstances), new Action<WidgetInstance>(this.detach_WidgetInstances));
			this._Columns = new EntitySet<Column>(new Action<Column>(this.attach_Columns), new Action<Column>(this.detach_Columns));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_UniqueID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UniqueID
		{
			get
			{
				return this._UniqueID;
			}
			set
			{
				if ((this._UniqueID != value))
				{
					this.OnUniqueIDChanging(value);
					this.SendPropertyChanging();
					this._UniqueID = value;
					this.SendPropertyChanged("UniqueID");
					this.OnUniqueIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderNo", DbType="Int NOT NULL")]
		public int OrderNo
		{
			get
			{
				return this._OrderNo;
			}
			set
			{
				if ((this._OrderNo != value))
				{
					this.OnOrderNoChanging(value);
					this.SendPropertyChanging();
					this._OrderNo = value;
					this.SendPropertyChanged("OrderNo");
					this.OnOrderNoChanged();
				}
			}
		}
		
		[Association(Name="WidgetZone_WidgetInstance", Storage="_WidgetInstances", ThisKey="ID", OtherKey="WidgetZoneId")]
		public EntitySet<WidgetInstance> WidgetInstances
		{
			get
			{
				return this._WidgetInstances;
			}
			set
			{
				this._WidgetInstances.Assign(value);
			}
		}
		
		[Association(Name="WidgetZone_Column", Storage="_Columns", ThisKey="ID", OtherKey="WidgetZoneId")]
		public EntitySet<Column> Columns
		{
			get
			{
				return this._Columns;
			}
			set
			{
				this._Columns.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WidgetInstances(WidgetInstance entity)
		{
			this.SendPropertyChanging();
			entity.WidgetZone = this;
		}
		
		private void detach_WidgetInstances(WidgetInstance entity)
		{
			this.SendPropertyChanging();
			entity.WidgetZone = null;
		}
		
		private void attach_Columns(Column entity)
		{
			this.SendPropertyChanging();
			entity.WidgetZone = this;
		}
		
		private void detach_Columns(Column entity)
		{
			this.SendPropertyChanging();
			entity.WidgetZone = null;
		}
	}
	
	[Table(Name="dbo.UserSetting")]
	public partial class UserSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private int _CurrentPageId;
		
		private System.DateTime _CreatedDate;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnCurrentPageIdChanging(int value);
    partial void OnCurrentPageIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public UserSetting()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_CurrentPageId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CurrentPageId
		{
			get
			{
				return this._CurrentPageId;
			}
			set
			{
				if ((this._CurrentPageId != value))
				{
					this.OnCurrentPageIdChanging(value);
					this.SendPropertyChanging();
					this._CurrentPageId = value;
					this.SendPropertyChanged("CurrentPageId");
					this.OnCurrentPageIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_UserSetting", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.UserSetting = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.UserSetting = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Token")]
	public partial class Token : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _UniqueID;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private System.Data.Linq.Binary _LastUpdated;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUniqueIDChanging(System.Guid value);
    partial void OnUniqueIDChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLastUpdatedChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdatedChanged();
    #endregion
		
		public Token()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UniqueID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid UniqueID
		{
			get
			{
				return this._UniqueID;
			}
			set
			{
				if ((this._UniqueID != value))
				{
					this.OnUniqueIDChanging(value);
					this.SendPropertyChanging();
					this._UniqueID = value;
					this.SendPropertyChanged("UniqueID");
					this.OnUniqueIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdated", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_Token", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Tokens.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Tokens.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.WidgetInstance")]
	public partial class WidgetInstance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _WidgetZoneId;
		
		private int _WidgetId;
		
		private int _OrderNo;
		
		private bool _Expanded;
		
		private bool _Maximized;
		
		private bool _Resized;
		
		private int _Width;
		
		private int _Height;
		
		private string _Title;
		
		private string _State;
		
		private int _VersionNo;
		
		private System.DateTime _CreatedDate;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntityRef<WidgetZone> _WidgetZone;
		
		private EntityRef<Widget> _Widget;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnWidgetZoneIdChanging(int value);
    partial void OnWidgetZoneIdChanged();
    partial void OnWidgetIdChanging(int value);
    partial void OnWidgetIdChanged();
    partial void OnOrderNoChanging(int value);
    partial void OnOrderNoChanged();
    partial void OnExpandedChanging(bool value);
    partial void OnExpandedChanged();
    partial void OnMaximizedChanging(bool value);
    partial void OnMaximizedChanged();
    partial void OnResizedChanging(bool value);
    partial void OnResizedChanged();
    partial void OnWidthChanging(int value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(int value);
    partial void OnHeightChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnVersionNoChanging(int value);
    partial void OnVersionNoChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public WidgetInstance()
		{
			this._WidgetZone = default(EntityRef<WidgetZone>);
			this._Widget = default(EntityRef<Widget>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_WidgetZoneId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int WidgetZoneId
		{
			get
			{
				return this._WidgetZoneId;
			}
			set
			{
				if ((this._WidgetZoneId != value))
				{
					if (this._WidgetZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWidgetZoneIdChanging(value);
					this.SendPropertyChanging();
					this._WidgetZoneId = value;
					this.SendPropertyChanged("WidgetZoneId");
					this.OnWidgetZoneIdChanged();
				}
			}
		}
		
		[Column(Storage="_WidgetId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int WidgetId
		{
			get
			{
				return this._WidgetId;
			}
			set
			{
				if ((this._WidgetId != value))
				{
					if (this._Widget.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWidgetIdChanging(value);
					this.SendPropertyChanging();
					this._WidgetId = value;
					this.SendPropertyChanged("WidgetId");
					this.OnWidgetIdChanged();
				}
			}
		}
		
		[Column(Storage="_OrderNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OrderNo
		{
			get
			{
				return this._OrderNo;
			}
			set
			{
				if ((this._OrderNo != value))
				{
					this.OnOrderNoChanging(value);
					this.SendPropertyChanging();
					this._OrderNo = value;
					this.SendPropertyChanged("OrderNo");
					this.OnOrderNoChanged();
				}
			}
		}
		
		[Column(Storage="_Expanded", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Expanded
		{
			get
			{
				return this._Expanded;
			}
			set
			{
				if ((this._Expanded != value))
				{
					this.OnExpandedChanging(value);
					this.SendPropertyChanging();
					this._Expanded = value;
					this.SendPropertyChanged("Expanded");
					this.OnExpandedChanged();
				}
			}
		}
		
		[Column(Storage="_Maximized", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Maximized
		{
			get
			{
				return this._Maximized;
			}
			set
			{
				if ((this._Maximized != value))
				{
					this.OnMaximizedChanging(value);
					this.SendPropertyChanging();
					this._Maximized = value;
					this.SendPropertyChanged("Maximized");
					this.OnMaximizedChanged();
				}
			}
		}
		
		[Column(Storage="_Resized", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Resized
		{
			get
			{
				return this._Resized;
			}
			set
			{
				if ((this._Resized != value))
				{
					this.OnResizedChanging(value);
					this.SendPropertyChanging();
					this._Resized = value;
					this.SendPropertyChanged("Resized");
					this.OnResizedChanged();
				}
			}
		}
		
		[Column(Storage="_Width", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[Column(Storage="_Height", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_VersionNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionNo
		{
			get
			{
				return this._VersionNo;
			}
			set
			{
				if ((this._VersionNo != value))
				{
					this.OnVersionNoChanging(value);
					this.SendPropertyChanging();
					this._VersionNo = value;
					this.SendPropertyChanged("VersionNo");
					this.OnVersionNoChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="WidgetZone_WidgetInstance", Storage="_WidgetZone", ThisKey="WidgetZoneId", OtherKey="ID", IsForeignKey=true)]
		public WidgetZone WidgetZone
		{
			get
			{
				return this._WidgetZone.Entity;
			}
			set
			{
				WidgetZone previousValue = this._WidgetZone.Entity;
				if (((previousValue != value) 
							|| (this._WidgetZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WidgetZone.Entity = null;
						previousValue.WidgetInstances.Remove(this);
					}
					this._WidgetZone.Entity = value;
					if ((value != null))
					{
						value.WidgetInstances.Add(this);
						this._WidgetZoneId = value.ID;
					}
					else
					{
						this._WidgetZoneId = default(int);
					}
					this.SendPropertyChanged("WidgetZone");
				}
			}
		}
		
		[Association(Name="Widget_WidgetInstance", Storage="_Widget", ThisKey="WidgetId", OtherKey="ID", IsForeignKey=true)]
		public Widget Widget
		{
			get
			{
				return this._Widget.Entity;
			}
			set
			{
				Widget previousValue = this._Widget.Entity;
				if (((previousValue != value) 
							|| (this._Widget.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Widget.Entity = null;
						previousValue.WidgetInstances.Remove(this);
					}
					this._Widget.Entity = value;
					if ((value != null))
					{
						value.WidgetInstances.Add(this);
						this._WidgetId = value.ID;
					}
					else
					{
						this._WidgetId = default(int);
					}
					this.SendPropertyChanged("Widget");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Widget")]
	public partial class Widget : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Url;
		
		private string _Description;
		
		private string _DefaultState;
		
		private string _Icon;
		
		private int _OrderNo;
		
		private string _RoleName;
		
		private bool _IsLocked;
		
		private bool _IsDefault;
		
		private System.DateTime _CreatedDate;
		
		private int _VersionNo;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private int _WidgetType;
		
		private EntitySet<WidgetInstance> _WidgetInstances;
		
		private EntitySet<WidgetsInRole> _WidgetsInRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDefaultStateChanging(string value);
    partial void OnDefaultStateChanged();
    partial void OnIconChanging(string value);
    partial void OnIconChanged();
    partial void OnOrderNoChanging(int value);
    partial void OnOrderNoChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnIsLockedChanging(bool value);
    partial void OnIsLockedChanged();
    partial void OnIsDefaultChanging(bool value);
    partial void OnIsDefaultChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnVersionNoChanging(int value);
    partial void OnVersionNoChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    partial void OnWidgetTypeChanging(int value);
    partial void OnWidgetTypeChanged();
    #endregion
		
		public Widget()
		{
			this._WidgetInstances = new EntitySet<WidgetInstance>(new Action<WidgetInstance>(this.attach_WidgetInstances), new Action<WidgetInstance>(this.detach_WidgetInstances));
			this._WidgetsInRoles = new EntitySet<WidgetsInRole>(new Action<WidgetsInRole>(this.attach_WidgetsInRoles), new Action<WidgetsInRole>(this.detach_WidgetsInRoles));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DefaultState", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string DefaultState
		{
			get
			{
				return this._DefaultState;
			}
			set
			{
				if ((this._DefaultState != value))
				{
					this.OnDefaultStateChanging(value);
					this.SendPropertyChanging();
					this._DefaultState = value;
					this.SendPropertyChanged("DefaultState");
					this.OnDefaultStateChanged();
				}
			}
		}
		
		[Column(Storage="_Icon", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Icon
		{
			get
			{
				return this._Icon;
			}
			set
			{
				if ((this._Icon != value))
				{
					this.OnIconChanging(value);
					this.SendPropertyChanging();
					this._Icon = value;
					this.SendPropertyChanged("Icon");
					this.OnIconChanged();
				}
			}
		}
		
		[Column(Storage="_OrderNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OrderNo
		{
			get
			{
				return this._OrderNo;
			}
			set
			{
				if ((this._OrderNo != value))
				{
					this.OnOrderNoChanging(value);
					this.SendPropertyChanging();
					this._OrderNo = value;
					this.SendPropertyChanged("OrderNo");
					this.OnOrderNoChanged();
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsLocked", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsLocked
		{
			get
			{
				return this._IsLocked;
			}
			set
			{
				if ((this._IsLocked != value))
				{
					this.OnIsLockedChanging(value);
					this.SendPropertyChanging();
					this._IsLocked = value;
					this.SendPropertyChanged("IsLocked");
					this.OnIsLockedChanged();
				}
			}
		}
		
		[Column(Storage="_IsDefault", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_VersionNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionNo
		{
			get
			{
				return this._VersionNo;
			}
			set
			{
				if ((this._VersionNo != value))
				{
					this.OnVersionNoChanging(value);
					this.SendPropertyChanging();
					this._VersionNo = value;
					this.SendPropertyChanged("VersionNo");
					this.OnVersionNoChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_WidgetType", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int WidgetType
		{
			get
			{
				return this._WidgetType;
			}
			set
			{
				if ((this._WidgetType != value))
				{
					this.OnWidgetTypeChanging(value);
					this.SendPropertyChanging();
					this._WidgetType = value;
					this.SendPropertyChanged("WidgetType");
					this.OnWidgetTypeChanged();
				}
			}
		}
		
		[Association(Name="Widget_WidgetInstance", Storage="_WidgetInstances", ThisKey="ID", OtherKey="WidgetId")]
		public EntitySet<WidgetInstance> WidgetInstances
		{
			get
			{
				return this._WidgetInstances;
			}
			set
			{
				this._WidgetInstances.Assign(value);
			}
		}
		
		[Association(Name="Widget_WidgetsInRole", Storage="_WidgetsInRoles", ThisKey="ID", OtherKey="WidgetId")]
		public EntitySet<WidgetsInRole> WidgetsInRoles
		{
			get
			{
				return this._WidgetsInRoles;
			}
			set
			{
				this._WidgetsInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WidgetInstances(WidgetInstance entity)
		{
			this.SendPropertyChanging();
			entity.Widget = this;
		}
		
		private void detach_WidgetInstances(WidgetInstance entity)
		{
			this.SendPropertyChanging();
			entity.Widget = null;
		}
		
		private void attach_WidgetsInRoles(WidgetsInRole entity)
		{
			this.SendPropertyChanging();
			entity.Widget = this;
		}
		
		private void detach_WidgetsInRoles(WidgetsInRole entity)
		{
			this.SendPropertyChanging();
			entity.Widget = null;
		}
	}
	
	[Table(Name="dbo.aspnet_Roles")]
	public partial class aspnet_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _RoleId;
		
		private string _RoleName;
		
		private string _LoweredRoleName;
		
		private string _Description;
		
		private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles;
		
		private EntitySet<RoleTemplate> _RoleTemplates;
		
		private EntitySet<WidgetsInRole> _WidgetsInRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnLoweredRoleNameChanging(string value);
    partial void OnLoweredRoleNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public aspnet_Role()
		{
			this._aspnet_UsersInRoles = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles));
			this._RoleTemplates = new EntitySet<RoleTemplate>(new Action<RoleTemplate>(this.attach_RoleTemplates), new Action<RoleTemplate>(this.detach_RoleTemplates));
			this._WidgetsInRoles = new EntitySet<WidgetsInRole>(new Action<WidgetsInRole>(this.attach_WidgetsInRoles), new Action<WidgetsInRole>(this.detach_WidgetsInRoles));
			OnCreated();
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredRoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredRoleName
		{
			get
			{
				return this._LoweredRoleName;
			}
			set
			{
				if ((this._LoweredRoleName != value))
				{
					this.OnLoweredRoleNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredRoleName = value;
					this.SendPropertyChanged("LoweredRoleName");
					this.OnLoweredRoleNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="aspnet_Role_aspnet_UsersInRole", Storage="_aspnet_UsersInRoles", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this._aspnet_UsersInRoles;
			}
			set
			{
				this._aspnet_UsersInRoles.Assign(value);
			}
		}
		
		[Association(Name="aspnet_Role_RoleTemplate", Storage="_RoleTemplates", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<RoleTemplate> RoleTemplates
		{
			get
			{
				return this._RoleTemplates;
			}
			set
			{
				this._RoleTemplates.Assign(value);
			}
		}
		
		[Association(Name="aspnet_Role_WidgetsInRole", Storage="_WidgetsInRoles", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<WidgetsInRole> WidgetsInRoles
		{
			get
			{
				return this._WidgetsInRoles;
			}
			set
			{
				this._WidgetsInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = this;
		}
		
		private void detach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = null;
		}
		
		private void attach_RoleTemplates(RoleTemplate entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = this;
		}
		
		private void detach_RoleTemplates(RoleTemplate entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = null;
		}
		
		private void attach_WidgetsInRoles(WidgetsInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = this;
		}
		
		private void detach_WidgetsInRoles(WidgetsInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = null;
		}
	}
	
	[Table(Name="dbo.aspnet_UsersInRoles")]
	public partial class aspnet_UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private System.Guid _RoleId;
		
		private EntityRef<aspnet_Role> _aspnet_Role;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    #endregion
		
		public aspnet_UsersInRole()
		{
			this._aspnet_Role = default(EntityRef<aspnet_Role>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._aspnet_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Association(Name="aspnet_Role_aspnet_UsersInRole", Storage="_aspnet_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public aspnet_Role aspnet_Role
		{
			get
			{
				return this._aspnet_Role.Entity;
			}
			set
			{
				aspnet_Role previousValue = this._aspnet_Role.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Role.Entity = null;
						previousValue.aspnet_UsersInRoles.Remove(this);
					}
					this._aspnet_Role.Entity = value;
					if ((value != null))
					{
						value.aspnet_UsersInRoles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Role");
				}
			}
		}
		
		[Association(Name="aspnet_User_aspnet_UsersInRole", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_UsersInRoles.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_UsersInRoles.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.RoleTemplate")]
	public partial class RoleTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Guid _RoleId;
		
		private System.Guid _TemplateUserId;
		
		private int _Priority;
		
		private EntityRef<aspnet_Role> _aspnet_Role;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnTemplateUserIdChanging(System.Guid value);
    partial void OnTemplateUserIdChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    #endregion
		
		public RoleTemplate()
		{
			this._aspnet_Role = default(EntityRef<aspnet_Role>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._aspnet_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Column(Storage="_TemplateUserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TemplateUserId
		{
			get
			{
				return this._TemplateUserId;
			}
			set
			{
				if ((this._TemplateUserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTemplateUserIdChanging(value);
					this.SendPropertyChanging();
					this._TemplateUserId = value;
					this.SendPropertyChanged("TemplateUserId");
					this.OnTemplateUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[Association(Name="aspnet_Role_RoleTemplate", Storage="_aspnet_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public aspnet_Role aspnet_Role
		{
			get
			{
				return this._aspnet_Role.Entity;
			}
			set
			{
				aspnet_Role previousValue = this._aspnet_Role.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Role.Entity = null;
						previousValue.RoleTemplates.Remove(this);
					}
					this._aspnet_Role.Entity = value;
					if ((value != null))
					{
						value.RoleTemplates.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Role");
				}
			}
		}
		
		[Association(Name="aspnet_User_RoleTemplate", Storage="_aspnet_User", ThisKey="TemplateUserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.RoleTemplates.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.RoleTemplates.Add(this);
						this._TemplateUserId = value.UserId;
					}
					else
					{
						this._TemplateUserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[Column]")]
	public partial class Column : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PageId;
		
		private int _WidgetZoneId;
		
		private int _ColumnNo;
		
		private int _ColumnWidth;
		
		private System.Data.Linq.Binary _LastUpdated;
		
		private EntityRef<WidgetZone> _WidgetZone;
		
		private EntityRef<Page> _Page;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPageIdChanging(int value);
    partial void OnPageIdChanged();
    partial void OnWidgetZoneIdChanging(int value);
    partial void OnWidgetZoneIdChanged();
    partial void OnColumnNoChanging(int value);
    partial void OnColumnNoChanged();
    partial void OnColumnWidthChanging(int value);
    partial void OnColumnWidthChanged();
    partial void OnLastUpdatedChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdatedChanged();
    #endregion
		
		public Column()
		{
			this._WidgetZone = default(EntityRef<WidgetZone>);
			this._Page = default(EntityRef<Page>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PageId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PageId
		{
			get
			{
				return this._PageId;
			}
			set
			{
				if ((this._PageId != value))
				{
					if (this._Page.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPageIdChanging(value);
					this.SendPropertyChanging();
					this._PageId = value;
					this.SendPropertyChanged("PageId");
					this.OnPageIdChanged();
				}
			}
		}
		
		[Column(Storage="_WidgetZoneId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int WidgetZoneId
		{
			get
			{
				return this._WidgetZoneId;
			}
			set
			{
				if ((this._WidgetZoneId != value))
				{
					if (this._WidgetZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWidgetZoneIdChanging(value);
					this.SendPropertyChanging();
					this._WidgetZoneId = value;
					this.SendPropertyChanged("WidgetZoneId");
					this.OnWidgetZoneIdChanged();
				}
			}
		}
		
		[Column(Storage="_ColumnNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ColumnNo
		{
			get
			{
				return this._ColumnNo;
			}
			set
			{
				if ((this._ColumnNo != value))
				{
					this.OnColumnNoChanging(value);
					this.SendPropertyChanging();
					this._ColumnNo = value;
					this.SendPropertyChanged("ColumnNo");
					this.OnColumnNoChanged();
				}
			}
		}
		
		[Column(Storage="_ColumnWidth", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ColumnWidth
		{
			get
			{
				return this._ColumnWidth;
			}
			set
			{
				if ((this._ColumnWidth != value))
				{
					this.OnColumnWidthChanging(value);
					this.SendPropertyChanging();
					this._ColumnWidth = value;
					this.SendPropertyChanged("ColumnWidth");
					this.OnColumnWidthChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdated", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[Association(Name="WidgetZone_Column", Storage="_WidgetZone", ThisKey="WidgetZoneId", OtherKey="ID", IsForeignKey=true)]
		public WidgetZone WidgetZone
		{
			get
			{
				return this._WidgetZone.Entity;
			}
			set
			{
				WidgetZone previousValue = this._WidgetZone.Entity;
				if (((previousValue != value) 
							|| (this._WidgetZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WidgetZone.Entity = null;
						previousValue.Columns.Remove(this);
					}
					this._WidgetZone.Entity = value;
					if ((value != null))
					{
						value.Columns.Add(this);
						this._WidgetZoneId = value.ID;
					}
					else
					{
						this._WidgetZoneId = default(int);
					}
					this.SendPropertyChanged("WidgetZone");
				}
			}
		}
		
		[Association(Name="Page_Column", Storage="_Page", ThisKey="PageId", OtherKey="ID", IsForeignKey=true)]
		public Page Page
		{
			get
			{
				return this._Page.Entity;
			}
			set
			{
				Page previousValue = this._Page.Entity;
				if (((previousValue != value) 
							|| (this._Page.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Page.Entity = null;
						previousValue.Columns.Remove(this);
					}
					this._Page.Entity = value;
					if ((value != null))
					{
						value.Columns.Add(this);
						this._PageId = value.ID;
					}
					else
					{
						this._PageId = default(int);
					}
					this.SendPropertyChanged("Page");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.WidgetsInRoles")]
	public partial class WidgetsInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _WidgetId;
		
		private System.Guid _RoleId;
		
		private EntityRef<aspnet_Role> _aspnet_Role;
		
		private EntityRef<Widget> _Widget;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnWidgetIdChanging(int value);
    partial void OnWidgetIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    #endregion
		
		public WidgetsInRole()
		{
			this._aspnet_Role = default(EntityRef<aspnet_Role>);
			this._Widget = default(EntityRef<Widget>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_WidgetId", DbType="Int NOT NULL")]
		public int WidgetId
		{
			get
			{
				return this._WidgetId;
			}
			set
			{
				if ((this._WidgetId != value))
				{
					if (this._Widget.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWidgetIdChanging(value);
					this.SendPropertyChanging();
					this._WidgetId = value;
					this.SendPropertyChanged("WidgetId");
					this.OnWidgetIdChanged();
				}
			}
		}
		
		[Column(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._aspnet_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Association(Name="aspnet_Role_WidgetsInRole", Storage="_aspnet_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public aspnet_Role aspnet_Role
		{
			get
			{
				return this._aspnet_Role.Entity;
			}
			set
			{
				aspnet_Role previousValue = this._aspnet_Role.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Role.Entity = null;
						previousValue.WidgetsInRoles.Remove(this);
					}
					this._aspnet_Role.Entity = value;
					if ((value != null))
					{
						value.WidgetsInRoles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Role");
				}
			}
		}
		
		[Association(Name="Widget_WidgetsInRole", Storage="_Widget", ThisKey="WidgetId", OtherKey="ID", IsForeignKey=true)]
		public Widget Widget
		{
			get
			{
				return this._Widget.Entity;
			}
			set
			{
				Widget previousValue = this._Widget.Entity;
				if (((previousValue != value) 
							|| (this._Widget.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Widget.Entity = null;
						previousValue.WidgetsInRoles.Remove(this);
					}
					this._Widget.Entity = value;
					if ((value != null))
					{
						value.WidgetsInRoles.Add(this);
						this._WidgetId = value.ID;
					}
					else
					{
						this._WidgetId = default(int);
					}
					this.SendPropertyChanged("Widget");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntityRef<UserSetting> _UserSetting;
		
		private EntitySet<Token> _Tokens;
		
		private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles;
		
		private EntitySet<RoleTemplate> _RoleTemplates;
		
		private EntitySet<Page> _Pages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public aspnet_User()
		{
			this._UserSetting = default(EntityRef<UserSetting>);
			this._Tokens = new EntitySet<Token>(new Action<Token>(this.attach_Tokens), new Action<Token>(this.detach_Tokens));
			this._aspnet_UsersInRoles = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles));
			this._RoleTemplates = new EntitySet<RoleTemplate>(new Action<RoleTemplate>(this.attach_RoleTemplates), new Action<RoleTemplate>(this.detach_RoleTemplates));
			this._Pages = new EntitySet<Page>(new Action<Page>(this.attach_Pages), new Action<Page>(this.detach_Pages));
			OnCreated();
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[Column(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[Column(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_UserSetting", Storage="_UserSetting", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public UserSetting UserSetting
		{
			get
			{
				return this._UserSetting.Entity;
			}
			set
			{
				UserSetting previousValue = this._UserSetting.Entity;
				if (((previousValue != value) 
							|| (this._UserSetting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserSetting.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._UserSetting.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("UserSetting");
				}
			}
		}
		
		[Association(Name="aspnet_User_Token", Storage="_Tokens", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Token> Tokens
		{
			get
			{
				return this._Tokens;
			}
			set
			{
				this._Tokens.Assign(value);
			}
		}
		
		[Association(Name="aspnet_User_aspnet_UsersInRole", Storage="_aspnet_UsersInRoles", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this._aspnet_UsersInRoles;
			}
			set
			{
				this._aspnet_UsersInRoles.Assign(value);
			}
		}
		
		[Association(Name="aspnet_User_RoleTemplate", Storage="_RoleTemplates", ThisKey="UserId", OtherKey="TemplateUserId")]
		public EntitySet<RoleTemplate> RoleTemplates
		{
			get
			{
				return this._RoleTemplates;
			}
			set
			{
				this._RoleTemplates.Assign(value);
			}
		}
		
		[Association(Name="aspnet_User_Page", Storage="_Pages", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Page> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				this._Pages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tokens(Token entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Tokens(Token entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_RoleTemplates(RoleTemplate entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_RoleTemplates(RoleTemplate entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
	}
	
	[Table(Name="dbo.Page")]
	public partial class Page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private System.Guid _UserId;
		
		private System.DateTime _CreatedDate;
		
		private int _VersionNo;
		
		private int _LayoutType;
		
		private int _PageType;
		
		private int _ColumnCount;
		
		private System.Data.Linq.Binary _LastUpdated;
		
		private bool _IsLocked;
		
		private System.Nullable<System.DateTime> _LastLockedStatusChangedAt;
		
		private bool _IsDownForMaintenance;
		
		private System.Nullable<System.DateTime> _LastDownForMaintenanceAt;
		
		private System.Nullable<bool> _ServeAsStartPageAfterLogin;
		
		private System.Nullable<int> _OrderNo;
		
		private EntitySet<Column> _Columns;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnVersionNoChanging(int value);
    partial void OnVersionNoChanged();
    partial void OnLayoutTypeChanging(int value);
    partial void OnLayoutTypeChanged();
    partial void OnPageTypeChanging(int value);
    partial void OnPageTypeChanged();
    partial void OnColumnCountChanging(int value);
    partial void OnColumnCountChanged();
    partial void OnLastUpdatedChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdatedChanged();
    partial void OnIsLockedChanging(bool value);
    partial void OnIsLockedChanged();
    partial void OnLastLockedStatusChangedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLockedStatusChangedAtChanged();
    partial void OnIsDownForMaintenanceChanging(bool value);
    partial void OnIsDownForMaintenanceChanged();
    partial void OnLastDownForMaintenanceAtChanging(System.Nullable<System.DateTime> value);
    partial void OnLastDownForMaintenanceAtChanged();
    partial void OnServeAsStartPageAfterLoginChanging(System.Nullable<bool> value);
    partial void OnServeAsStartPageAfterLoginChanged();
    partial void OnOrderNoChanging(System.Nullable<int> value);
    partial void OnOrderNoChanged();
    #endregion
		
		public Page()
		{
			this._Columns = new EntitySet<Column>(new Action<Column>(this.attach_Columns), new Action<Column>(this.detach_Columns));
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_VersionNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionNo
		{
			get
			{
				return this._VersionNo;
			}
			set
			{
				if ((this._VersionNo != value))
				{
					this.OnVersionNoChanging(value);
					this.SendPropertyChanging();
					this._VersionNo = value;
					this.SendPropertyChanged("VersionNo");
					this.OnVersionNoChanged();
				}
			}
		}
		
		[Column(Storage="_LayoutType", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LayoutType
		{
			get
			{
				return this._LayoutType;
			}
			set
			{
				if ((this._LayoutType != value))
				{
					this.OnLayoutTypeChanging(value);
					this.SendPropertyChanging();
					this._LayoutType = value;
					this.SendPropertyChanged("LayoutType");
					this.OnLayoutTypeChanged();
				}
			}
		}
		
		[Column(Storage="_PageType", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PageType
		{
			get
			{
				return this._PageType;
			}
			set
			{
				if ((this._PageType != value))
				{
					this.OnPageTypeChanging(value);
					this.SendPropertyChanging();
					this._PageType = value;
					this.SendPropertyChanged("PageType");
					this.OnPageTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ColumnCount", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ColumnCount
		{
			get
			{
				return this._ColumnCount;
			}
			set
			{
				if ((this._ColumnCount != value))
				{
					this.OnColumnCountChanging(value);
					this.SendPropertyChanging();
					this._ColumnCount = value;
					this.SendPropertyChanged("ColumnCount");
					this.OnColumnCountChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdated", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[Column(Storage="_IsLocked", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsLocked
		{
			get
			{
				return this._IsLocked;
			}
			set
			{
				if ((this._IsLocked != value))
				{
					this.OnIsLockedChanging(value);
					this.SendPropertyChanging();
					this._IsLocked = value;
					this.SendPropertyChanged("IsLocked");
					this.OnIsLockedChanged();
				}
			}
		}
		
		[Column(Storage="_LastLockedStatusChangedAt", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastLockedStatusChangedAt
		{
			get
			{
				return this._LastLockedStatusChangedAt;
			}
			set
			{
				if ((this._LastLockedStatusChangedAt != value))
				{
					this.OnLastLockedStatusChangedAtChanging(value);
					this.SendPropertyChanging();
					this._LastLockedStatusChangedAt = value;
					this.SendPropertyChanged("LastLockedStatusChangedAt");
					this.OnLastLockedStatusChangedAtChanged();
				}
			}
		}
		
		[Column(Storage="_IsDownForMaintenance", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDownForMaintenance
		{
			get
			{
				return this._IsDownForMaintenance;
			}
			set
			{
				if ((this._IsDownForMaintenance != value))
				{
					this.OnIsDownForMaintenanceChanging(value);
					this.SendPropertyChanging();
					this._IsDownForMaintenance = value;
					this.SendPropertyChanged("IsDownForMaintenance");
					this.OnIsDownForMaintenanceChanged();
				}
			}
		}
		
		[Column(Storage="_LastDownForMaintenanceAt", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastDownForMaintenanceAt
		{
			get
			{
				return this._LastDownForMaintenanceAt;
			}
			set
			{
				if ((this._LastDownForMaintenanceAt != value))
				{
					this.OnLastDownForMaintenanceAtChanging(value);
					this.SendPropertyChanging();
					this._LastDownForMaintenanceAt = value;
					this.SendPropertyChanged("LastDownForMaintenanceAt");
					this.OnLastDownForMaintenanceAtChanged();
				}
			}
		}
		
		[Column(Storage="_ServeAsStartPageAfterLogin", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> ServeAsStartPageAfterLogin
		{
			get
			{
				return this._ServeAsStartPageAfterLogin;
			}
			set
			{
				if ((this._ServeAsStartPageAfterLogin != value))
				{
					this.OnServeAsStartPageAfterLoginChanging(value);
					this.SendPropertyChanging();
					this._ServeAsStartPageAfterLogin = value;
					this.SendPropertyChanged("ServeAsStartPageAfterLogin");
					this.OnServeAsStartPageAfterLoginChanged();
				}
			}
		}
		
		[Column(Storage="_OrderNo", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> OrderNo
		{
			get
			{
				return this._OrderNo;
			}
			set
			{
				if ((this._OrderNo != value))
				{
					this.OnOrderNoChanging(value);
					this.SendPropertyChanging();
					this._OrderNo = value;
					this.SendPropertyChanged("OrderNo");
					this.OnOrderNoChanged();
				}
			}
		}
		
		[Association(Name="Page_Column", Storage="_Columns", ThisKey="ID", OtherKey="PageId")]
		public EntitySet<Column> Columns
		{
			get
			{
				return this._Columns;
			}
			set
			{
				this._Columns.Assign(value);
			}
		}
		
		[Association(Name="aspnet_User_Page", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Pages.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Pages.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Columns(Column entity)
		{
			this.SendPropertyChanging();
			entity.Page = this;
		}
		
		private void detach_Columns(Column entity)
		{
			this.SendPropertyChanging();
			entity.Page = null;
		}
	}
}
#pragma warning restore 1591
